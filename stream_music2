#!/usr/bin/python3
import argparse
import asyncio
import pathlib
import time

from metric_db import MetricDB

from mpris_controls import MprisControls, PlaybackStatus

from subsonic_connection import SubsonicConnection

from subsonic_vlc_player import VlcPlayer

from tqdm import tqdm

ignore_keys = {'coverArt'}


def clean_title(s):
    s = s.lower()
    if s[0] == ' ':
        print(s)

    for punc in '."()\'[]_$*#â€¦':
        s = s.replace(punc, ' ')
    while '  ' in s:
        s = s.replace('  ', ' ')

    while s.startswith(' '):
        s = s[1:]

    prefixes = ['the ', 'a ', 'an ']

    for prefix in prefixes:
        if s.startswith(prefix):
            s = s[len(prefix):]

    return s


class MusicStreamer:
    def __init__(self):
        self.subsonic = SubsonicConnection(ignore=ignore_keys)
        self.folder = pathlib.Path('~/.subsonic_stream/').expanduser()
        current_folder = pathlib.Path(__file__).parent.resolve()
        self.db = MetricDB('songs', self.folder, current_folder / 'subsonic_db.yaml')
        self.loop = asyncio.get_event_loop()
        self.stopped = False

        self.player = VlcPlayer()

    def crawl(self):
        now = int(time.time())
        last = self.db.lookup('last', 'crawl')
        if last and now - last < 86400:  # 24 hours a day
            return

        progress = tqdm(list(self.subsonic.get_top_level_folders()))

        for mf_id, name, folder_id in progress:
            # TODO: Crawl albums
            c = 0
            for song in self.subsonic.get_folder_contents(mf_id, folder_id):
                c += 1
                progress.set_description(f'{name:15} {c:04d}')
                self.db.update('songs', song)

        self.db.execute('DELETE FROM crawl')
        self.db.insert('crawl', {'last': now})

    def update_sort_titles(self, force=False):
        query = 'SELECT id, title FROM songs'
        if not force:
            query += ' WHERE sort_title IS NULL'
        for song in self.db.query(query):
            ct = clean_title(song['title'])
            if ct != song['title']:
                song['sort_title'] = ct
                self.db.update('songs', song)

    async def play(self, song_info):
        self.subsonic.display_info(song_info)
        url = self.subsonic.get_streaming_url(song_info['id'])
        if await self.player.stream(url):
            self.subsonic.scrobble(song_info['id'])
            entry = {'id': song_info['id']}
            if song_info.get('count'):
                entry['count'] = song_info['count'] + 1
            else:
                entry['count'] = 1
            entry['last'] = int(time.time())
            self.db.update('plays', entry)

    async def control(self, msg):
        if msg == 'next':
            await self.player.skip()
        elif msg == 'pause':
            await self.player.play_pause()
        elif msg == 'playpause':
            await self.player.play_pause()
        elif msg == 'play':
            await self.player.play_pause()
        elif msg == 'stop':
            self.stopped = True
            await self.player.stop()


async def main(ms, query):
    controls = await MprisControls.create('Empress', 'subso', ms.control)

    songs = ms.db.query(query)
    controls.set_playback_status(PlaybackStatus.PLAYING)
    for song in songs:
        controls.set_metadata(song['title'], song['id'], song['artist'], song['album'])
        await ms.play(song)

        if ms.stopped:
            break

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('genre', nargs='?', default='Soundtrack')
    parser.add_argument('-f', '--folder', type=int, default=0)
    parser.add_argument('-c', '--recache', action='store_true')
    args = parser.parse_args()

    if args.genre == 'Soundtrack':
        TS = 1620228335
    else:
        TS = 1604946876

    query = 'SELECT songs.id, title, album, year, artist, count FROM songs LEFT JOIN plays ON songs.id = plays.id'
    query += f' WHERE genre = "{args.genre}" and folder={args.folder}'
    query += f' and artist NOT LIKE "%Washington Univ%"'
    query += f' and artist NOT LIKE "%Carniv%"'
    query += f' and artist NOT LIKE "%Deciduous%"'
    query += f' and (last < {TS} or last is null)'
    if args.genre == 'Soundtrack':
        query += ' ORDER BY year, album, track'
    else:
        query += ' ORDER BY sort_title, title'

    ms = MusicStreamer()
    try:
        if args.recache:
            ms.crawl()
            ms.update_sort_titles()
        asyncio.get_event_loop().run_until_complete(main(ms, query))
    except KeyboardInterrupt:
        pass
    finally:
        ms.player.keyboard.stop()
        ms.db.close()

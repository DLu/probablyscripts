#!/usr/bin/python3

import argparse
import configparser
import click
from identify import identify
from io import StringIO
import pathlib
import shutil
import subprocess
from precomm_lib import PRECOMMIT_FILENAME, YAML_ARGS, PrecommitConfig, find_git_directory


SCRIPT_FOLDER = pathlib.Path(__file__).parent

MY_REPOS = {
    'standard': ('https://github.com/pre-commit/pre-commit-hooks', 'v6.0.0'),
    'spelling': ('https://github.com/codespell-project/codespell', 'v2.4.1'),
    'autopep8': ('https://github.com/hhatto/autopep8', 'v2.3.2'),
    'flake8': ('https://github.com/PyCQA/flake8', '7.3.0'),
    'clang': ('https://github.com/pre-commit/mirrors-clang-format', 'v21.1.2'),
    'lxml': ('https://github.com/Lucas-C/pre-commit-hooks-lxml', 'v1.1.0'),
    'prettier': ('https://github.com/pre-commit/mirrors-prettier', 'v4.0.0-alpha.8'),
    'yamllint': ('https://github.com/adrienverge/yamllint', 'v1.37.1'),
    'yamlfmt': ('https://github.com/jumanjihouse/pre-commit-hook-yamlfmt', '0.2.3'),
    'ros': ('https://github.com/tier4/pre-commit-hooks-ros', 'v0.10.0'),
    'djlint': ('https://github.com/djlint/djLint', 'v1.35.4'),
}


MY_CONFIGS = {
    'standard': [
        ('standard', ['end-of-file-fixer', 'trailing-whitespace', 'check-merge-conflict', 'mixed-line-ending',
                      'check-executables-have-shebangs', 'check-shebang-scripts-are-executable', 'detect-private-key',
                      'destroyed-symlinks', 'check-symlinks', 'check-case-conflict']),
        ('spelling', ['codespell']),
    ],
    'python': [
        ('standard', ['check-ast', 'double-quote-string-fixer',
                      'requirements-txt-fixer']),
        ('autopep8', ['autopep8']),
        ('flake8', ['flake8']),
    ],
    'c++': [
        ('clang', ['clang-format']),
    ],
    'yaml': [
        ('standard', ['check-yaml']),
        ('yamllint', ['yamllint']),
        ('yamlfmt', ['yamlfmt']),
    ],
    'xml': [
        ('standard', ['check-xml']),
    ],
    'json': [
        ('standard', ['check-json', 'pretty-format-json']),
    ],
    'html': [
        ('lxml', ['forbid-html-img-without-alt-text', 'forbid-non-std-html-attributes',
                  'html-tags-blacklist', 'html-attributes-blacklist']),
        ('prettier', ['prettier']),
    ],
    'xacro': [
        ('ros', ['prettier-xacro']),
    ],
    'package.xml': [
        ('ros', ['prettier-package-xml']),
    ],
    'jinja': [
        ('djlint', ['djlint-jinja']),
    ],
}

OTHER_FIELDS = {
    'codespell': {'args': ['--write-changes']},
    'yamllint': {'args': ['--format', 'parsable', '--strict']},
    'yamlfmt': {'args': YAML_ARGS},
    'prettier': {'types_or': ['css', 'javascript', 'html']},
}


def find(list_of_dicts, key, value):
    for entry in list_of_dicts:
        if isinstance(entry, dict) and entry.get(key) == value:
            return entry


def check_configuration(config, config_key):
    if config_key not in MY_CONFIGS:
        return
    for repo_key, hooks in MY_CONFIGS[config_key]:
        url, version = MY_REPOS[repo_key]
        entry = find(config['repos'], 'repo', url)
        if not entry:
            entry = {'repo': url, 'hooks': []}
            click.secho(f'Adding {repo_key} repo...', fg='blue')
            config['repos'].append(entry)
        if version:
            entry['rev'] = version
        for hook_name in hooks:
            hook = find(entry['hooks'], 'id', hook_name)
            if not hook:
                hook = {'id': hook_name}
                entry['hooks'].append(hook)
                click.secho(f'Adding {hook_name} hook', fg='green')
            hook.update(OTHER_FIELDS.get(hook_name, {}))


def check_configuration_file(filename):
    config_path = root / filename
    default_config = SCRIPT_FOLDER / filename
    if not config_path.exists():
        click.secho(f'Writing {filename}', fg='blue')
        shutil.copy(default_config, config_path)


def get_unignored_files(folder):
    """Return all files that are tracked/untracked by git, but not the ignored files"""
    my_files = []
    commands = [
        'git ls-files',
        'git ls-files . --exclude-standard --others',
    ]
    for cmd in commands:
        for file_s in subprocess.check_output(cmd, shell=True).decode().splitlines():
            my_files.append(pathlib.Path(file_s))

    return my_files


def find_file_types(folder, include_precommit_file=False):
    ft = set()
    for path in get_unignored_files(folder):
        if path.stem == PRECOMMIT_FILENAME and not include_precommit_file:
            continue
        for tag in identify.tags_from_path(path):
            ft.add(tag)
        if path.suffix == '.xacro':
            ft.add('xacro')
        if path.stem == 'package.xml':
            ft.add('package.xml')

    return ft


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--include-precommit-file', action='store_true')
    args = parser.parse_args()

    root = find_git_directory()
    hook_file = root / '.git' / 'hooks' / 'pre-commit'

    config = PrecommitConfig(root)

    if 'autoupdate_schedule' in config:
        del config['autoupdate_schedule']
    if 'ci' not in config:
        config['ci'] = {}
    if 'autoupdate_schedule' not in config['ci']:
        click.secho('Setting autoupdate_schedule to quarterly', fg='blue')
        config['ci']['autoupdate_schedule'] = 'quarterly'

    check_configuration(config, 'standard')

    file_types = find_file_types(root, args.include_precommit_file)
    for filetype in file_types:
        check_configuration(config, filetype)

    if 'python' in file_types:
        cfg = configparser.ConfigParser()
        cfg_path = root / 'setup.cfg'
        if cfg_path.exists():
            cfg.read(cfg_path)
            changed = False
        else:
            click.secho('Writing setup.cfg', fg='blue')
            changed = True

        section_name = 'flake8'
        key = 'max_line_length'
        value = '120'

        if not cfg.has_section(section_name):
            cfg.add_section(section_name)
            changed = True

        old_val = cfg[section_name].get(key)
        if old_val != value:
            cfg.set(section_name, key, value)
            changed = True

        if changed:
            string_file = StringIO()
            cfg.write(string_file, space_around_delimiters=False)
            string_file.seek(0)
            contents = string_file.read()
            if contents.endswith('\n\n'):
                contents = contents[:-1]
            with open(cfg_path, 'w') as f:
                f.write(contents)

    if 'c++' in file_types:
        check_configuration_file('.clang-format')

    if 'html' in file_types:
        check_configuration_file('.prettierrc.yaml')

    if 'yaml' in file_types:
        check_configuration_file('.yamllint.yaml')

    config.write()

    if not hook_file.exists():
        click.secho('Running pre-commit install', fg='bright_blue')
        subprocess.call(['pre-commit', 'install'], cwd=root)

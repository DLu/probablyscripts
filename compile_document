#!/usr/bin/env python3
import argparse
import os
import pathlib
import re
import subprocess
import tempfile

import humanize

import yaml

POINTS_PER_INCH = 72
PIXELS_PER_INCH = 300

PDF_PATTERN = re.compile(r'\.pdf(\[\d+\])?')


def get_size(path):
    return humanize.naturalsize(os.stat(path.name).st_size)


def pdf_convert(input_filename, ratio):
    temp_pdf = tempfile.NamedTemporaryFile(suffix='.pdf')
    subprocess.call(['convert', '-density', '300', str(input_filename),
                     '-gravity', 'center', '-extent', ratio,
                     temp_pdf.name])

    return [temp_pdf]


def xcf_convert(input_filename, ratio):
    temp_pdf = tempfile.NamedTemporaryFile(suffix='.pdf')
    with tempfile.NamedTemporaryFile(suffix='.png') as temp_png:
        subprocess.call(['xcf2png', str(input_filename), '-o', temp_png.name])  # xcftools
        subprocess.call(['convert', temp_png.name, '-page', ratio, temp_pdf.name])

    return temp_pdf


def png_convert(input_filename, ratio):
    temp_pdf = tempfile.NamedTemporaryFile(suffix='.pdf')
    subprocess.call(['convert', str(input_filename), '-gravity', 'center', '-extent', ratio, temp_pdf.name])
    return temp_pdf


def tex_convert(input_filename):
    pdf_filename = pathlib.Path(input_filename.stem + '.pdf')
    subprocess.call(['xelatex', str(input_filename)], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    for suffix in ['.aux', '.log']:
        junk = pdf_filename.with_suffix(suffix)
        if junk.exists():
            junk.unlink()

    return pdf_filename


parser = argparse.ArgumentParser()
parser.add_argument('folder', type=pathlib.Path)
parser.add_argument('output', nargs='?', type=pathlib.Path)
parser.add_argument('-w', '--width', default=5.5, type=float)
parser.add_argument('--height', default=8.5, type=float)
parser.add_argument('-n', '--no_compression', action='store_true')
args = parser.parse_args()

layout = yaml.safe_load(open(args.folder / 'layout.yaml'))
files = []
to_delete = []

points_ratio = f'{int(args.width * POINTS_PER_INCH)}x{int(args.height * POINTS_PER_INCH)}'
pixels_ratio = f'{int(args.width * PIXELS_PER_INCH)}x{int(args.height * PIXELS_PER_INCH)}'

for section in layout:
    if isinstance(section, str):
        filename = section
    else:
        filename = section['file']

    fp = args.folder / filename
    new_files = []
    if fp.suffix == '.xcf':
        new_files.append(xcf_convert(fp, points_ratio))
    elif PDF_PATTERN.match(fp.suffix):
        new_files += pdf_convert(fp, pixels_ratio)
    elif fp.suffix == '.tex':
        pdf = tex_convert(fp)
        to_delete.append(pdf)
        new_files.append(pdf)
    elif fp.suffix == '.png' or fp.suffix == '.jpg':
        new_files.append(png_convert(fp, pixels_ratio))
    else:
        print(f'unknown suffix {fp.suffix}')
        continue
    print('{:28} {}'.format(str(fp), ', '.join(map(get_size, new_files))))

    files += new_files

if args.output is None:
    args.output = args.folder / 'output.pdf'

if args.no_compression:
    subprocess.call(['pdftk'] + [x.name for x in files] + ['cat', 'output', str(args.output)])
else:
    with tempfile.NamedTemporaryFile(suffix='.pdf') as temp_pdf:
        subprocess.call(['pdftk'] + [x.name for x in files] + ['cat', 'output', temp_pdf.name])
        subprocess.call(['convert', '-density', '300x300', '-quality', '60', '-compress', 'jpeg',
                         str(temp_pdf.name), str(args.output)])

for fn in to_delete:
    fn.unlink()

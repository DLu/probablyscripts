#!/usr/bin/python3

import argparse
import os
import pathlib
from PIL import Image, ImageDraw
import face_recognition
import numpy
import yaml

IMAGE_EXTENSIONS = ['.jpg', '.png', '.jpeg']
METADATA = '.image_metadata.yaml'

# TODO: Flask app to set center and zoom
# TODO: Auto-levels


def get_images(input_directory):
    images = {}
    for filename in input_directory.glob('*.*'):
        if filename.name == METADATA:
            continue
        ext = filename.suffix.lower()
        if ext not in IMAGE_EXTENSIONS:
            print('Skipping ' + str(filename))
            continue
        images[filename.name] = filename
    return images


def get_rounded_mask(size, round_ratio, scale_factor=3):
    large_size = size * scale_factor
    diameter = int(round_ratio * large_size)
    radius = diameter / 2
    offset = large_size - diameter
    r_offset = large_size - radius

    mask = Image.new('L', (large_size, large_size), 0)
    draw = ImageDraw.Draw(mask)
    for x, y in [(0, 0), (0, offset), (offset, 0), (offset, offset)]:
        draw.ellipse((x, y, x + diameter, y + diameter), fill=255)
    draw.rectangle((radius, 0, r_offset, large_size), fill=255)
    draw.rectangle((0, radius, large_size, r_offset), fill=255)
    return mask.resize((size, size), Image.ANTIALIAS)


def get_modification_time(filepath):
    file_stats = os.stat(filepath)
    return int(file_stats.st_mtime)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('input_directory', type=pathlib.Path)
    parser.add_argument('-s', '--size', type=int, default=1000)
    parser.add_argument('-r', '--round_ratio', type=float, default=0.25)
    parser.add_argument('-f', '--face', action='store_true')
    parser.add_argument('output_directory', type=pathlib.Path, nargs='?')
    args = parser.parse_args()

    mask = get_rounded_mask(args.size, args.round_ratio)

    image_dict = get_images(args.input_directory)

    metadata_path = args.input_directory / METADATA

    if metadata_path.exists():
        metadata = yaml.safe_load(open(metadata_path))
    else:
        metadata = {}

    try:
        for name, filepath in sorted(image_dict.items()):
            print(name)
            if name not in metadata:
                metadata[name] = {}
            im_meta = metadata[name]

            last_update = get_modification_time(filepath)
            im_meta['time'] = last_update

            im = Image.open(filepath).convert('RGB')
            im_array = numpy.array(im)

            width, height = im.size

            if args.face and 'faces' not in im_meta and 'center' not in im_meta:
                faces = []
                for top, right, bottom, left in face_recognition.face_locations(im_array):
                    faces.append({'x0': left, 'y0': top, 'x1': right, 'y1': bottom})
                im_meta['faces'] = faces
                print(f'\t{len(faces)} face(s)')

            if 'center' in im_meta:
                center = im_meta['center']
            elif im_meta.get('faces'):
                face = im_meta['faces'][0]
                center = {}
                for d in 'xy':
                    center[d] = (face[f'{d}0'] + face[f'{d}1']) // 2
            else:
                center = {'x': width // 2, 'y': height // 2}

            crop_width = min(center['x'], width - center['x'])
            crop_height = min(center['y'], height - center['y'])
            crop_size = min(crop_width, crop_height)
            box = (center['x'] - crop_size, center['y'] - crop_size, center['x'] + crop_size, center['y'] + crop_size)
            im = im.crop(box)
            im = im.resize((args.size, args.size))

            # Apply mask
            im.putalpha(mask)

            # Put on white background
            background = Image.new('RGBA', im.size, (255, 255, 255))
            im = Image.alpha_composite(background, im).convert('RGB')

            # Save as jpg
            if args.output_directory:
                im.save(args.output_directory / (filepath.stem + '.jpg'))
    finally:
        yaml.dump(metadata, open(metadata_path, 'w'))

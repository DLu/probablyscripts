#!/usr/bin/python3

import argparse
import click
import os
import pathlib
from PIL import Image, ImageDraw
import face_recognition
import numpy
import yaml

from image_edit_tools import METADATA, get_images, get_center, get_box, auto_level


def get_rounded_mask(size, round_ratio, aspect, scale_factor=3):
    large_size = size * scale_factor, int(size * scale_factor * aspect)
    diameter = int(round_ratio * large_size[0])
    radius = diameter / 2
    offset = large_size[0] - diameter, large_size[1] - diameter
    r_offset = large_size[0] - radius, large_size[1] - radius

    mask = Image.new('L', large_size, 0)
    draw = ImageDraw.Draw(mask)
    for x, y in [(0, 0), (0, offset[1]), (offset[0], 0), offset]:
        draw.ellipse((x, y, x + diameter, y + diameter), fill=255)
    draw.rectangle((radius, 0, r_offset[0], large_size[1]), fill=255)
    draw.rectangle((0, radius, large_size[0], r_offset[1]), fill=255)
    return mask.resize((size, int(size * aspect)), Image.ANTIALIAS)


def get_modification_time(filepath):
    file_stats = os.stat(filepath)
    return int(file_stats.st_mtime)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('input_directory', type=pathlib.Path)
    parser.add_argument('-s', '--size', type=int, default=1000)
    parser.add_argument('-r', '--round_ratio', type=float, default=0.25)
    parser.add_argument('-f', '--face', action='store_true')
    parser.add_argument('-t', '--transparent-background', action='store_true')
    parser.add_argument('-l', '--levels', nargs='?', type=float, const=0.01)
    parser.add_argument('-a', '--aspect', nargs='?', type=float, default=1.0)
    parser.add_argument('-n', '--number', nargs='?', type=int)
    parser.add_argument('output_directory', type=pathlib.Path)
    args = parser.parse_args()

    arg_string = f'{args.size}/{args.round_ratio}/{args.levels}/{args.aspect}'

    mask = get_rounded_mask(args.size, args.round_ratio, args.aspect)

    image_dict = get_images(args.input_directory)

    metadata_path = args.input_directory / METADATA

    if metadata_path.exists():
        metadata = yaml.safe_load(open(metadata_path))
    else:
        metadata = {}

    try:
        items = sorted(image_dict.items())
        if args.number:
            items = items[:args.number]
        for name, filepath in items:
            last_update = get_modification_time(filepath)
            if name not in metadata or last_update != metadata[name].get('read_time'):
                metadata[name] = {'read_time': last_update}
            im_meta = metadata[name]

            if args.transparent_background:
                ext = '.png'
                other_ext = '.jpg'
            else:
                ext = '.jpg'
                other_ext = '.png'
            outpath = args.output_directory / (filepath.stem + ext)
            other_outpath = args.output_directory / (filepath.stem + other_ext)

            if outpath.exists():
                write_time = get_modification_time(outpath)
                if write_time == im_meta.get('write_time') and arg_string == im_meta.get('args'):
                    click.secho(f'[{name}]', fg='bright_black')
                    continue
            click.secho(name, fg='bright_blue')

            im = Image.open(filepath).convert('RGB')

            width, height = im.size
            im_meta['width'] = width
            im_meta['height'] = height

            if args.face and 'faces' not in im_meta and 'center' not in im_meta:
                faces = []
                im_array = numpy.array(im)
                for top, left, bottom, right in face_recognition.face_locations(im_array):
                    faces.append({'x0': min(left, right),
                                  'y0': min(top, bottom),
                                  'x1': max(left, right),
                                  'y1': max(top, bottom)
                                  })
                im_meta['faces'] = faces
                print(f'\t{len(faces)} face(s)')

            center = get_center(im_meta)
            box = get_box(im_meta, center, args.aspect)

            im = im.crop(box)
            im = im.resize((args.size, int(args.size * args.aspect)))

            if args.levels is not None:
                im = auto_level(im, args.levels)

            # Apply mask
            im.putalpha(mask)

            if not args.transparent_background:
                # Put on white background
                background = Image.new('RGBA', im.size, (255, 255, 255))
                im = Image.alpha_composite(background, im).convert('RGB')

            # Save file
            if other_outpath.exists():
                other_outpath.unlink()
            im.save(outpath)
            im_meta['write_time'] = get_modification_time(outpath)
            im_meta['args'] = arg_string
    finally:
        yaml.dump(metadata, open(metadata_path, 'w'))

#!/usr/bin/python3
import argparse
import pathlib
import random

from subsonic_connection import SubsonicConnection

from subsonic_vlc_player import VlcPlayer

import yaml

ignore_keys = {'created', 'genre'}

class MusicStreamer:
    def __init__(self):
        self.subsonic = SubsonicConnection(ignore=ignore_keys)
        self.player = VlcPlayer()

    def get_random_songs(self, genre, n=1, musicFolderId=None):
        res = self.conn.getRandomSongs(n, genre, musicFolderId=musicFolderId)
        return res['randomSongs']['song']

    def get_songs_by_genre(self, genre, musicFolderId=None, recache=False):
        filename = pathlib.Path(f'~/.subsonic_stream/{genre}.yaml').expanduser()
        filename.parent.mkdir(exist_ok=True)

        if filename.exists() and not recache:
            return yaml.safe_load(open(filename))

        data = list(self.subsonic.get_songs_by_genre(genre, musicFolderId))
        data.sort(key=lambda d: (str(d['album']), d.get('track', 0)))

        yaml.safe_dump(data, open(filename, 'w'))

        return data

    def play(self, song_info):
        self.subsonic.display_info(song_info)
        url = self.subsonic.get_streaming_url(song_info['id'])
        if self.player.stream(url):
            self.subsonic.scrobble(song_info['id'])


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('genre', nargs='?', default='Soundtrack')
    parser.add_argument('-f', '--folder', type=int, default=0)
    parser.add_argument('-c', '--recache', action='store_true')
    args = parser.parse_args()

    ms = MusicStreamer()
    songs = ms.get_songs_by_genre(args.genre, args.folder, args.recache)
    random.shuffle(songs)

    try:
        for song_info in songs:
            artist = song_info.get('artist', '')
            if 'Washington University' in artist or 'Carniv' in artist or 'Deciduous' in artist:
                continue
            ms.play(song_info)
    except KeyboardInterrupt:
        ms.player.keyboard.stop()
